{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is a test project overview page.</p>"},{"location":"#adoption-plan","title":"Adoption plan","text":"<ul> <li> Create basic setup</li> <li> Deploy to GitHub Pages</li> <li> Apply material theme</li> <li> Create nested content structure</li> <li> Add mermaid diagrams</li> <li> Add code snippets</li> <li> Add PlantUML diagrams. Note that using snippets is not supported yet.</li> <li> Check other cool features</li> </ul>"},{"location":"architecture/roadmap/","title":"Architecture Roadmap","text":"<p>This is a root page describing system architecture.</p>"},{"location":"architecture/views/context-view/","title":"Context view","text":""},{"location":"architecture/views/context-view/#primary-view","title":"Primary View","text":""},{"location":"architecture/views/diagrams/","title":"Diagrams","text":""},{"location":"architecture/views/diagrams/#mermaid-embedded","title":"Mermaid embedded","text":"<pre><code>sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n    Alice-)John: See you later!\n</code></pre>"},{"location":"architecture/views/diagrams/#plantuml-embedded","title":"PlantUML embedded","text":"<pre>4cfb62727ba5cb8ddb917bdb90e5e5e05e8af537fbc372ba149888573d7e3cfbd129e362ed409ded1e514ab3d53ca76740639a058114460521d3abcf25ccb5ed</pre><pre>4c535b6c44ff458fe853464ed981817a10a322f37806705ca1c2292e84f111a3038eff05763d50c6fa25a75cb7d660e9507f1f797b9dce4e88e466b9c4b6e2ba</pre>"},{"location":"architecture/views/diagrams/#plantuml-external","title":"PlantUML external","text":"<p>External PlantUML files are not supported</p> <p>Please note that loading puml from external files is not supported yet. Kudos to <code>mkdocs_puml</code> plugin: they are planning to enhance it.</p> <pre><code>\n</code></pre> <p></p>"},{"location":"architecture/views/example/","title":"Implementation example","text":"<p>The system is implemented in Rust. Please implement common traits for your domain items where possible.</p>"},{"location":"architecture/views/example/#example","title":"Example","text":"src/domain/amount.rs<pre><code>#[derive(Debug, Clone, Copy, PartialEq)]\npub struct Amount(f64);\n\n#[derive(Debug, Error)]\npub enum AmountError {\n    #[error(\"Amount is negative: {amount}\")]\n    NegativeAmount { amount: f64 },\n}\n\nimpl Amount {\n    pub fn new(amount: f64) -&gt; Result&lt;Self, AmountError&gt; {\n        if amount &lt; 0.0 {\n            return Err(AmountError::NegativeAmount { amount });\n        }\n        Ok(Self(amount))\n    }\n}\n\nimpl TryFrom&lt;f64&gt; for Amount {\n    type Error = AmountError;\n\n    fn try_from(value: f64) -&gt; Result&lt;Self, Self::Error&gt; {\n        Amount::new(value)\n    }\n}\n</code></pre>"},{"location":"architecture/views/views/","title":"Architecture views","text":"<p>There are multiple views describing the architecture of the system. Each view is a collection of diagrams and documentation that describe a specific aspect of the system. The views are created to communicate the architecture to different stakeholders, such as developers, architects, and business stakeholders (1).</p> <ol> <li> Stakeholders - guys holding steaks. Nice, meaty, medium-rare steaks.</li> </ol>"},{"location":"architecture/views/views/#list-of-views","title":"List of views","text":"View Description Audience Scope System Context A high-level view of the system and its environment Developers, Architects System"}]}