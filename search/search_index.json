{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is a test project overview page.</p>"},{"location":"#adoption-plan","title":"Adoption plan","text":"<ul> <li>[x] Create basic setup</li> <li>[x] Deploy to GitHub Pages</li> <li>[x] Apply material theme</li> <li>[x] Create nested content structure</li> <li>[x] Add mermaid diagrams</li> <li>[x] Add code snippets</li> <li>[ ] Add PlantUML diagrams</li> <li>[ ] Check other cool features</li> </ul>"},{"location":"architecture/roadmap/","title":"Architecture Roadmap","text":"<p>This is a root page describing system architecture.</p>"},{"location":"architecture/views/context-view/","title":"Context view","text":""},{"location":"architecture/views/example/","title":"Implementation example","text":"<p>The system is implemented in Rust. Please implement common traits for your domain items where possible.</p>"},{"location":"architecture/views/example/#example","title":"Example","text":"src/domain/amount.rs<pre><code>#[derive(Debug, Clone, Copy, PartialEq)]\npub struct Amount(f64);\n\n#[derive(Debug, Error)]\npub enum AmountError {\n    #[error(\"Amount is negative: {amount}\")]\n    NegativeAmount { amount: f64 },\n}\n\nimpl Amount {\n    pub fn new(amount: f64) -&gt; Result&lt;Self, AmountError&gt; {\n        if amount &lt; 0.0 {\n            return Err(AmountError::NegativeAmount { amount });\n        }\n        Ok(Self(amount))\n    }\n}\n\nimpl TryFrom&lt;f64&gt; for Amount {\n    type Error = AmountError;\n\n    fn try_from(value: f64) -&gt; Result&lt;Self, Self::Error&gt; {\n        Amount::new(value)\n    }\n}\n</code></pre>"},{"location":"architecture/views/interaction/","title":"Interaction","text":""},{"location":"architecture/views/interaction/#main-sequence","title":"Main sequence","text":"<pre><code>sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n    Alice-)John: See you later!\n</code></pre>"},{"location":"architecture/views/views/","title":"Architecture views","text":"View Description Audience Scope System Context A high-level view of the system and its environment Developers, Architects System"}]}